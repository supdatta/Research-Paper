{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPB2c1XGp7HNdG3YnwKKVrz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install transformers tensorflow scikit-learn\n","\n","import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","from transformers import BertTokenizer, TFBertForSequenceClassification\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, matthews_corrcoef # Ensure confusion_matrix is imported\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","from sklearn.metrics import precision_score, f1_score\n","# Step 1: Load dataset\n","df = pd.read_csv('/content/Hate speech excel file.csv', encoding='ISO-8859-1')\n","\n","# Step 2: Remove Comment Entries\n","df = df[~df['caption_segment'].str.contains(\"comment\", case=False, na=False)]  # Adjust 'caption_segment' to your column name\n","\n","# Step 3: Prepare Features (X) and Labels (y)\n","X = df['caption_segment'].astype(str)  # Modify this to the appropriate text column\n","y = df['sentiment']  # Modify this to the appropriate label column\n","\n","# Step 4: Handle missing values\n","X = X.fillna('')\n","y = y.fillna(0)\n","\n","# Step 5: Encode labels\n","y = pd.get_dummies(y).values  # One-hot encode the labels for multi-class classification\n","\n","# Step 6: Tokenize text using BERT Tokenizer\n","tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n","\n","# Tokenize the input text data\n","def tokenize_data(texts, tokenizer, max_len=128):\n","    return tokenizer(\n","        texts.tolist(),\n","        max_length=max_len,\n","        padding=True,\n","        truncation=True,\n","        return_tensors='tf'\n","    )\n","\n","X_tokenized = tokenize_data(X, tokenizer)\n","\n","# Step 7: Split dataset into training and testing sets\n","# Convert the TensorFlow tensor to a NumPy array before splitting\n","X_train, X_test, y_train, y_test = train_test_split(X_tokenized['input_ids'].numpy(), y, test_size=0.2, random_state=42)\n","\n","# Step 8: Load pre-trained BERT model for sequence classification\n","model = TFBertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=y_train.shape[1])\n","\n","# Step 9: Compile the BERT model\n","optimizer = tf.keras.optimizers.Adam(learning_rate=2e-5)\n","model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n","\n","# Step 10: Train the model\n","history = model.fit(X_train, y_train, epochs=3, batch_size=16, validation_data=(X_test, y_test))\n","\n","# Step 11: Evaluate the model\n","y_pred_probs = model.predict(X_test)\n","y_pred = np.argmax(y_pred_probs.logits, axis=1)\n","y_true = np.argmax(y_test, axis=1)\n","\n","# Step 12: Calculate Accuracy\n","accuracy = accuracy_score(y_true, y_pred)\n","print(f'Accuracy: {accuracy * 100:.2f}%')\n","\n","# Step 13: Precision, Recall, F1 Score\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_true, y_pred))\n","\n","# Step 14 continued: Confusion Matrix\n","conf_matrix = confusion_matrix(y_true, y_pred)\n","\n","# Function to calculate TP, FP, FN, TN for a multi-class confusion matrix\n","def calculate_metrics(conf_matrix):\n","    FP = conf_matrix.sum(axis=0) - np.diag(conf_matrix)  # False Positives\n","    FN = conf_matrix.sum(axis=1) - np.diag(conf_matrix)  # False Negatives\n","    TP = np.diag(conf_matrix)  # True Positives\n","    TN = conf_matrix.sum() - (FP + FN + TP)  # True Negatives\n","\n","    return TP, FP, FN, TN\n","\n","# Calculate metrics for each class\n","TP, FP, FN, TN = calculate_metrics(conf_matrix)\n","\n","# Print metrics for each class\n","for i, class_name in enumerate(np.unique(y_true)):\n","    print(f\"\\nClass {class_name}:\")\n","    print(f\"  True Positives (TP): {TP[i]}\")\n","    print(f\"  False Positives (FP): {FP[i]}\")\n","    print(f\"  False Negatives (FN): {FN[i]}\")\n","    print(f\"  True Negatives (TN): {TN[i]}\")\n","\n","# Plot confusion matrix using seaborn\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y_true), yticklabels=np.unique(y_true))\n","plt.xlabel('Predicted Label')\n","plt.ylabel('True Label')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Step 15: Calculate additional metrics\n","# Error Rate\n","error_rate = 1 - accuracy\n","print(f\"\\nError Rate: {error_rate * 100:.2f}%\")\n","\n","# Precision\n","precision = precision_score(y_true, y_pred, average='weighted')\n","print(f\"Precision: {precision:.2f}\")\n","\n","# F1 Score\n","f1 = f1_score(y_true, y_pred, average='weighted')\n","print(f\"F1 Score: {f1:.2f}\")\n","\n","# Step 16: Matthews Correlation Coefficient (MCC)\n","mcc = matthews_corrcoef(y_true, y_pred)\n","print(f'Matthews Correlation Coefficient: {mcc:.2f}')\n"],"metadata":{"id":"cjqBNxvNZrC1","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1727019319816,"user_tz":-330,"elapsed":6163324,"user":{"displayName":"Saptangshu Datta","userId":"11034336111113471898"}},"outputId":"f40b077d-06f8-4f51-a949-d4857766f448"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.44.2)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.17.0)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.3.2)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.16.1)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.24.7)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.26.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.1)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.2)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.9.11)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.32.3)\n","Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.5)\n","Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.19.1)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.5)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.6.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.11.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.4.1)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (71.0.4)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.12.2)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.64.1)\n","Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.17.0)\n","Requirement already satisfied: keras>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.4.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.1)\n","Requirement already satisfied: scipy>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.44.0)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (2024.6.1)\n","Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (13.8.1)\n","Requirement already satisfied: namex in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.0.8)\n","Requirement already satisfied: optree in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.12.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2024.8.30)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.7)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.0.4)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow) (2.1.5)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (2.18.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->tensorflow) (0.1.2)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n","  warnings.warn(\n","All PyTorch model weights were used when initializing TFBertForSequenceClassification.\n","\n","Some weights or buffers of the TF 2.0 model TFBertForSequenceClassification were not initialized from the PyTorch model and are newly initialized: ['classifier.weight', 'classifier.bias']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/3\n","76/76 [==============================] - 2008s 26s/step - loss: 7.9898 - accuracy: 0.4510 - val_loss: 9.2332 - val_accuracy: 0.3742\n","Epoch 2/3\n","76/76 [==============================] - 1970s 26s/step - loss: 5.2852 - accuracy: 0.3621 - val_loss: 0.8356 - val_accuracy: 0.6490\n","Epoch 3/3\n","76/76 [==============================] - 1979s 26s/step - loss: 0.9875 - accuracy: 0.5789 - val_loss: 0.4803 - val_accuracy: 0.6457\n","10/10 [==============================] - 146s 14s/step\n","Accuracy: 64.57%\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.66      0.83      0.74       180\n","           1       0.00      0.00      0.00         9\n","           2       0.60      0.40      0.48       113\n","\n","    accuracy                           0.65       302\n","   macro avg       0.42      0.41      0.41       302\n","weighted avg       0.62      0.65      0.62       302\n","\n","\n","Class 0:\n","  True Positives (TP): 150\n","  False Positives (FP): 77\n","  False Negatives (FN): 30\n","  True Negatives (TN): 45\n","\n","Class 1:\n","  True Positives (TP): 0\n","  False Positives (FP): 0\n","  False Negatives (FN): 9\n","  True Negatives (TN): 293\n","\n","Class 2:\n","  True Positives (TP): 45\n","  False Positives (FP): 30\n","  False Negatives (FN): 68\n","  True Negatives (TN): 159\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Error Rate: 35.43%\n","Precision: 0.62\n","F1 Score: 0.62\n","Matthews Correlation Coefficient: 0.24\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]}]}