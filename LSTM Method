{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPBemWQIp2Qil2IW/OHiA3V"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["# Install necessary libraries\n","!pip install tensorflow\n","\n","import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n","from sklearn.metrics import accuracy_score, classification_report\n","from sklearn.metrics import confusion_matrix, precision_score, f1_score, matthews_corrcoef\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Load dataset\n","df = pd.read_csv('/content/sample_data/Hate speech excel file.csv', encoding='ISO-8859-1')\n","\n","# Step 1: Remove Comment Entries (assuming there's a column named 'comment' or a pattern)\n","# Modify this based on your dataset. For example, if 'comment' column exists or filter based on some pattern\n","df = df[~df['caption_segment'].str.contains(\"comment\", case=False, na=False)]  # Adjust the column name accordingly\n","\n","# Step 2: Prepare Features (X) and Labels (y)\n","X = df['caption_segment'].astype(str)  # Modify this to the appropriate text column\n","y = df['sentiment']  # Modify this to the appropriate label column\n","\n","# Step 3: Handle missing values\n","X = X.fillna('')\n","y = y.fillna(0)\n","\n","# Step 4: Encode labels\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","\n","# Step 5: Tokenize text (convert words to numerical tokens)\n","tokenizer = Tokenizer(num_words=10000)  # Limit the number of words to 10,000\n","tokenizer.fit_on_texts(X)\n","X_tokenized = tokenizer.texts_to_sequences(X)\n","\n","# Step 6: Pad sequences to ensure they have the same length\n","max_sequence_len = 100  # You can adjust this based on your dataset\n","X_padded = pad_sequences(X_tokenized, maxlen=max_sequence_len)\n","\n","# Step 7: Split dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X_padded, y, test_size=0.2, random_state=42,shuffle= True)\n","\n","# Step 8: Build the LSTM Model\n","model = Sequential()\n","\n","# Embedding Layer\n","model.add(Embedding(input_dim=10000, output_dim=128, input_length=max_sequence_len))\n","\n","# LSTM Layer\n","model.add(LSTM(128, return_sequences=False))\n","\n","# Dropout Layer to prevent overfitting\n","model.add(Dropout(0.5))\n","\n","# Fully Connected Layer\n","model.add(Dense(64, activation='relu'))\n","model.add(Dropout(0.5))\n","\n","# Output Layer\n","model.add(Dense(1, activation='sigmoid'))  # Binary classification\n","\n","# Step 9: Compile the model\n","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# Step 10: Train the model\n","# Removed shuffle from validation_data and added it as a parameter to model.fit\n","history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))\n","\n","# Step 11: Evaluate the model\n","y_pred = (model.predict(X_test) > 0.5).astype(\"int32\")\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f\"LSTM Model Accuracy: {accuracy * 100:.2f}%\")\n","\n","# Step 12: Print classification report\n","print(\"\\nClassification Report:\")\n","# Convert label_encoder.classes_ to a list of strings\n","class_names = [str(c) for c in label_encoder.classes_]\n","print(classification_report(y_test, y_pred, target_names=class_names))\n","# Step 13: Confusion Matrix\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)\n","plt.xlabel('Predicted Label')\n","plt.ylabel('True Label')\n","plt.title('Confusion Matrix')\n","plt.show()\n","# Extract values from the confusion matrix\n","# Print the shape of the confusion matrix to check dimensions\n","print(\"Confusion matrix shape:\", conf_matrix.shape)\n","\n","# If it's a binary classification (2x2 matrix)\n","if conf_matrix.shape == (2, 2):\n","    tn, fp, fn, tp = conf_matrix.ravel()\n","\n","    # Print True Positives (TP), False Positives (FP), False Negatives (FN), True Negatives (TN)\n","    print(f\"True Positives (TP): {tp}\")\n","    print(f\"False Positives (FP): {fp}\")\n","    print(f\"False Negatives (FN): {fn}\")\n","    print(f\"True Negatives (TN): {tn}\")\n","\n","# If it's a multi-class classification (more than 2x2 matrix)\n","else:\n","    print(\"Multi-class classification. Cannot directly extract TN, FP, FN, TP.\")\n","    # Handle multi-class metrics here if needed\n","\n","# Error Rate\n","error_rate = 1 - accuracy\n","print(f\"Error Rate: {error_rate * 100:.2f}%\")\n","\n","# Precision\n","precision = precision_score(y_test, y_pred, average='weighted')\n","print(f\"Precision: {precision:.2f}\")\n","\n","# F1 Score\n","f1 = f1_score(y_test, y_pred, average='weighted')\n","print(f\"F1 Score: {f1:.2f}\")\n","\n","# Matthews Correlation Coefficient (MCC)\n","mcc = matthews_corrcoef(y_test, y_pred)\n","print(f'Matthews Correlation Coefficient: {mcc:.2f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"ukROj0mSNXKz","executionInfo":{"status":"ok","timestamp":1726994141402,"user_tz":-330,"elapsed":19037,"user":{"displayName":"Saptangshu Datta","userId":"11034336111113471898"}},"outputId":"499855bb-2429-4caf-c7e7-b47c1d9e0e1b"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.17.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.6.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.11.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.4.1)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.1)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.32.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (71.0.4)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.12.2)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.64.1)\n","Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.17.0)\n","Requirement already satisfied: keras>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.4.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.1)\n","Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.26.4)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.44.0)\n","Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (13.8.1)\n","Requirement already satisfied: namex in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.0.8)\n","Requirement already satisfied: optree in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.12.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2024.8.30)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.7)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.0.4)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow) (2.1.5)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (2.18.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->tensorflow) (0.1.2)\n","Epoch 1/10\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 20ms/step - accuracy: 0.1078 - loss: 0.5487 - val_accuracy: 0.3675 - val_loss: 0.3658\n","Epoch 2/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - accuracy: 0.1981 - loss: -0.3581 - val_accuracy: 0.1954 - val_loss: -0.1503\n","Epoch 3/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - accuracy: 0.2385 - loss: -3.4232 - val_accuracy: 0.5430 - val_loss: -3.4649\n","Epoch 4/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.4228 - loss: -9.0067 - val_accuracy: 0.2881 - val_loss: -1.2866\n","Epoch 5/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - accuracy: 0.4098 - loss: -0.9637 - val_accuracy: 0.3013 - val_loss: -2.7405\n","Epoch 6/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - accuracy: 0.3108 - loss: -7.9966 - val_accuracy: 0.0861 - val_loss: 12.2892\n","Epoch 7/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - accuracy: 0.1654 - loss: -0.7320 - val_accuracy: 0.4470 - val_loss: -13.1553\n","Epoch 8/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.3715 - loss: -24.8758 - val_accuracy: 0.2384 - val_loss: -2.0275\n","Epoch 9/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.3174 - loss: -27.9199 - val_accuracy: 0.1987 - val_loss: 10.4096\n","Epoch 10/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.2659 - loss: -34.5637 - val_accuracy: 0.4669 - val_loss: -40.0368\n","\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step\n","LSTM Model Accuracy: 46.69%\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","        -1.0       0.75      0.78      0.76       180\n","         0.0       0.00      0.00      0.00         9\n","         1.0       0.00      0.00      0.00       113\n","\n","    accuracy                           0.47       302\n","   macro avg       0.25      0.26      0.25       302\n","weighted avg       0.44      0.47      0.46       302\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAqsAAAIjCAYAAAAk+FJEAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA1u0lEQVR4nO3de3zP9f//8ft7Y+/N7GTDNofNccg5Ocb4EB2UQ4X6lE3KofGhIVFiUusnIgmdsETnqFBSTskxjHSQY/owhw1jzDbvvX5/9PX+tEa22fZ+4na9XHa5tNfrtdfr8d6ld+9br73er7fNsixLAAAAgIHcXD0AAAAAcDnEKgAAAIxFrAIAAMBYxCoAAACMRawCAADAWMQqAAAAjEWsAgAAwFjEKgAAAIxFrAIAAMBYxCoAXMLu3bvVsWNH+fn5yWazadGiRYW6/wMHDshms2nu3LmFut9rWdu2bdW2bVtXjwHAMMQqAGPt3btX/fv3V9WqVeXp6SlfX1+1atVKr7zyitLT04v02FFRUfrxxx/1/PPPa968eWrSpEmRHq84RUdHy2azydfX95K/x927d8tms8lms2nSpEn53v/hw4c1btw4JSYmFsK0AG50JVw9AABcypIlS3T//ffLbrerd+/eqlu3rjIzM7V27VqNGDFCP/30k954440iOXZ6errWr1+vp59+WoMGDSqSY4SFhSk9PV0lS5Yskv1fSYkSJXTu3Dl98cUX6tGjR4518+fPl6enp86fP1+gfR8+fFhxcXEKDw9Xw4YN8/xzX3/9dYGOB+D6RqwCMM7+/fvVq1cvhYWFacWKFQoJCXGui4mJ0Z49e7RkyZIiO/7x48clSf7+/kV2DJvNJk9PzyLb/5XY7Xa1atVK7733Xq5YXbBgge666y598sknxTLLuXPnVKpUKXl4eBTL8QBcW7gMAIBxJk6cqLS0NL399ts5QvWi6tWra8iQIc7vL1y4oOeee07VqlWT3W5XeHi4Ro8erYyMjBw/Fx4ers6dO2vt2rVq2rSpPD09VbVqVb3zzjvObcaNG6ewsDBJ0ogRI2Sz2RQeHi7pzz+fX/znvxo3bpxsNluOZcuXL9ett94qf39/lS5dWhERERo9erRz/eWuWV2xYoVat24tb29v+fv7q0uXLvrll18uebw9e/YoOjpa/v7+8vPzU58+fXTu3LnL/2L/5sEHH9SXX36pU6dOOZdt3rxZu3fv1oMPPphr+xMnTmj48OGqV6+eSpcuLV9fX91xxx3avn27c5tVq1bplltukST16dPHeTnBxcfZtm1b1a1bV1u2bFGbNm1UqlQp5+/l79esRkVFydPTM9fj79SpkwICAnT48OE8P1YA1y5iFYBxvvjiC1WtWlUtW7bM0/aPPvqonn32WTVu3FhTpkxRZGSk4uPj1atXr1zb7tmzR/fdd59uu+02TZ48WQEBAYqOjtZPP/0kSerevbumTJkiSXrggQc0b948TZ06NV/z//TTT+rcubMyMjI0fvx4TZ48Wffcc4++//77f/y5b775Rp06ddKxY8c0btw4xcbGat26dWrVqpUOHDiQa/sePXrozJkzio+PV48ePTR37lzFxcXlec7u3bvLZrPp008/dS5bsGCBatWqpcaNG+faft++fVq0aJE6d+6sl19+WSNGjNCPP/6oyMhIZzjWrl1b48ePlyT169dP8+bN07x589SmTRvnflJSUnTHHXeoYcOGmjp1qtq1a3fJ+V555RWVLVtWUVFRcjgckqTXX39dX3/9tV599VWFhobm+bECuIZZAGCQ1NRUS5LVpUuXPG2fmJhoSbIeffTRHMuHDx9uSbJWrFjhXBYWFmZJstasWeNcduzYMctut1vDhg1zLtu/f78lyXrppZdy7DMqKsoKCwvLNcPYsWOtv/7ndMqUKZYk6/jx45ed++Ix5syZ41zWsGFDq1y5clZKSopz2fbt2y03Nzerd+/euY73yCOP5Nhnt27drMDAwMse86+Pw9vb27Isy7rvvvus9u3bW5ZlWQ6HwwoODrbi4uIu+Ts4f/685XA4cj0Ou91ujR8/3rls8+bNuR7bRZGRkZYka9asWZdcFxkZmWPZsmXLLEnWhAkTrH379lmlS5e2unbtesXHCOD6wZlVAEY5ffq0JMnHxydP2y9dulSSFBsbm2P5sGHDJCnXta116tRR69atnd+XLVtWERER2rdvX4Fn/ruL17p+9tlnys7OztPPJCUlKTExUdHR0SpTpoxzef369XXbbbc5H+dfDRgwIMf3rVu3VkpKivN3mBcPPvigVq1apSNHjmjFihU6cuTIJS8BkP68ztXN7c+XDYfDoZSUFOclDlu3bs3zMe12u/r06ZOnbTt27Kj+/ftr/Pjx6t69uzw9PfX666/n+VgArn3EKgCj+Pr6SpLOnDmTp+1///13ubm5qXr16jmWBwcHy9/fX7///nuO5ZUrV861j4CAAJ08ebKAE+fWs2dPtWrVSo8++qjKly+vXr166cMPP/zHcL04Z0RERK51tWvXVnJyss6ePZtj+d8fS0BAgCTl67Hceeed8vHx0QcffKD58+frlltuyfW7vCg7O1tTpkxRjRo1ZLfbFRQUpLJly2rHjh1KTU3N8zErVKiQrzdTTZo0SWXKlFFiYqKmTZumcuXK5flnAVz7iFUARvH19VVoaKh27tyZr5/7+xucLsfd3f2Syy3LKvAxLl5PeZGXl5fWrFmjb775Rg8//LB27Nihnj176rbbbsu17dW4msdykd1uV/fu3ZWQkKCFCxde9qyqJL3wwguKjY1VmzZt9O6772rZsmVavny5brrppjyfQZb+/P3kx7Zt23Ts2DFJ0o8//pivnwVw7SNWARinc+fO2rt3r9avX3/FbcPCwpSdna3du3fnWH706FGdOnXK+c7+whAQEJDjnfMX/f3srSS5ubmpffv2evnll/Xzzz/r+eef14oVK7Ry5cpL7vvinLt27cq17tdff1VQUJC8vb2v7gFcxoMPPqht27bpzJkzl3xT2kUff/yx2rVrp7ffflu9evVSx44d1aFDh1y/k7z+j0NenD17Vn369FGdOnXUr18/TZw4UZs3by60/QMwH7EKwDhPPvmkvL299eijj+ro0aO51u/du1evvPKKpD//jC0p1zv2X375ZUnSXXfdVWhzVatWTampqdqxY4dzWVJSkhYuXJhjuxMnTuT62Ys3x//77bQuCgkJUcOGDZWQkJAj/nbu3Kmvv/7a+TiLQrt27fTcc89p+vTpCg4Ovux27u7uuc7afvTRRzp06FCOZRej+lJhn18jR47UwYMHlZCQoJdfflnh4eGKioq67O8RwPWHDwUAYJxq1appwYIF6tmzp2rXrp3jE6zWrVunjz76SNHR0ZKkBg0aKCoqSm+88YZOnTqlyMhIbdq0SQkJCeratetlb4tUEL169dLIkSPVrVs3/ec//9G5c+c0c+ZM1axZM8cbjMaPH681a9borrvuUlhYmI4dO6YZM2aoYsWKuvXWWy+7/5deekl33HGHWrRoob59+yo9PV2vvvqq/Pz8NG7cuEJ7HH/n5uamZ5555orbde7cWePHj1efPn3UsmVL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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Confusion matrix shape: (3, 3)\n","Multi-class classification. Cannot directly extract TN, FP, FN, TP.\n","Error Rate: 53.31%\n","Precision: 0.44\n","F1 Score: 0.46\n","Matthews Correlation Coefficient: 0.17\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, matthews_corrcoef\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"metadata":{"id":"S-js8DrCSNWL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Step 13: Precision, Recall, F1 Score\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))\n","\n","# Step 14: Confusion Matrix\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Negative', 'Positive'], yticklabels=['Negative', 'Positive'])\n","plt.xlabel('Predicted Label')\n","plt.ylabel('True Label')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Step 15: Matthews Correlation Coefficient (MCC)\n","mcc = matthews_corrcoef(y_test, y_pred)\n","print(f'\\n\\nMatthews Correlation Coefficient: {mcc:.2f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":949},"id":"UV6c7dlHS4bK","executionInfo":{"status":"ok","timestamp":1726112122432,"user_tz":-330,"elapsed":714,"user":{"displayName":"Saptangshu Datta","userId":"11034336111113471898"}},"outputId":"2a8f4f3d-950a-4dea-861e-86d1739213a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.80      0.68      0.74       180\n","           1       0.06      1.00      0.11         9\n","           2       0.00      0.00      0.00       113\n","\n","    accuracy                           0.44       302\n","   macro avg       0.29      0.56      0.28       302\n","weighted avg       0.48      0.44      0.44       302\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n","Matthews Correlation Coefficient: 0.24\n"]}]}]}