{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOFpY+EYBfdRIi9I0LvM3ue"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from sklearn.metrics import precision_score, f1_score, confusion_matrix, matthews_corrcoef, accuracy_score\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import numpy as np\n","!pip install tensorflow scikit-learn\n","\n","import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, matthews_corrcoef\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Load dataset\n","df = pd.read_csv('/content/Hate speech excel file.csv', encoding='ISO-8859-1')\n","\n","# Step 1: Remove Comment Entries\n","df = df[~df['caption_segment'].str.contains(\"comment\", case=False, na=False)]  # Adjust 'caption_segment' to your column name\n","\n","# Step 2: Prepare Features (X) and Labels (y)\n","X = df['caption_segment'].astype(str)  # Modify this to the appropriate text column\n","y = df['sentiment']  # Modify this to the appropriate label column\n","\n","# Step 3: Handle missing values\n","X = X.fillna('')\n","y = y.fillna(0)\n","\n","# Step 4: Encode labels\n","label_encoder = LabelEncoder()\n","y = label_encoder.fit_transform(y)\n","\n","# Step 5: Tokenize text (convert words to numerical tokens)\n","tokenizer = Tokenizer(num_words=10000)  # Limit the number of words to 10,000\n","tokenizer.fit_on_texts(X)\n","X_tokenized = tokenizer.texts_to_sequences(X)\n","\n","# Step 6: Pad sequences to ensure they have the same length\n","max_sequence_len = 150  # Increase the sequence length\n","X_padded = pad_sequences(X_tokenized, maxlen=max_sequence_len)\n","\n","# Step 7: Split dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X_padded, y, test_size=0.2, random_state=42)\n","\n","# Step 8: Build the Enhanced BiLSTM Model\n","model = Sequential()\n","\n","# Embedding Layer with pre-trained GloVe embeddings (optional for further improvement)\n","embedding_dim = 128\n","model.add(Embedding(input_dim=10000, output_dim=embedding_dim, input_length=max_sequence_len))\n","\n","# Add 2 BiLSTM Layers for increased complexity\n","model.add(Bidirectional(LSTM(128, return_sequences=True)))  # First BiLSTM layer with return_sequences=True\n","model.add(Dropout(0.5))  # Dropout to avoid overfitting\n","\n","model.add(Bidirectional(LSTM(64)))  # Second BiLSTM layer\n","model.add(Dropout(0.5))\n","\n","# Dense Layer with ReLU activation\n","model.add(Dense(64, activation='relu'))\n","model.add(Dropout(0.5))  # Another dropout layer for regularization\n","\n","# Output Layer (for binary classification)\n","model.add(Dense(1, activation='sigmoid'))\n","\n","# Step 9: Compile the model with a different optimizer and learning rate\n","optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)  # Lower learning rate\n","model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# Step 10: Train the model with more epochs\n","history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test),shuffle=True)\n","\n","\n","# Assuming your X_test data has 302 samples and 150 features\n","X_test = X_test.reshape(302, 150)\n","\n","# Now you should be able to predict without errors\n","y_pred_probs = model.predict(X_test)\n","y_pred = (y_pred_probs > 0.5).astype(int)\n","\n","# Step 12: Accuracy\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f'Accuracy: {accuracy * 100:.2f}%')\n","\n","# Step 13: Classification Report\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))\n","\n","# Step 14: Confusion Matrix\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","plt.figure(figsize=(8, 6))\n","\n","# Get the number of classes\n","num_classes = conf_matrix.shape[0]\n","\n","# Plot the confusion matrix with correct labels\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_) # Use label_encoder.classes_ to get class labels\n","plt.xlabel('Predicted Label')\n","plt.ylabel('True Label')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print the confusion matrix\n","print(\"Confusion Matrix:\")\n","print(conf_matrix)\n","\n","if num_classes == 2:\n","    # Binary classification: Extract TN, FP, FN, TP from the confusion matrix\n","    tn, fp, fn, tp = conf_matrix.ravel()\n","\n","    # Step 15: Print True Positives (TP), False Positives (FP), False Negatives (FN), True Negatives (TN)\n","    print(f\"True Positives (TP): {tp}\")\n","    print(f\"False Positives (FP): {fp}\")\n","    print(f\"False Negatives (FN): {fn}\")\n","    print(f\"True Negatives (TN): {tn}\")\n","\n","    # Error Rate\n","    error_rate = 1 - accuracy\n","    print(f\"Error Rate: {error_rate * 100:.2f}%\")\n","\n","    # Precision\n","    precision = precision_score(y_test, y_pred, average='weighted')\n","    print(f\"Precision: {precision:.2f}\")\n","\n","    # F1 Score\n","    f1 = f1_score(y_test, y_pred, average='weighted')\n","    print(f\"F1 Score: {f1:.2f}\")\n","\n","    # Step 16: Matthews Correlation Coefficient (MCC)\n","    mcc = matthews_corrcoef(y_test, y_pred)\n","    print(f'Matthews Correlation Coefficient: {mcc:.2f}')\n","\n","else:\n","    # Handle multiclass classification metrics\n","    print(\"Multiclass classification metrics:\")\n","\n","    # For each class, calculate TP, FP, FN, TN\n","    for i, class_name in enumerate(label_encoder.classes_):\n","        # For each class, calculate TP, FP, FN, TN\n","        tp = conf_matrix[i, i]  # True positives for class i\n","        fp = conf_matrix[:, i].sum() - tp  # False positives for class i\n","        fn = conf_matrix[i, :].sum() - tp  # False negatives for class i\n","        tn = conf_matrix.sum() - (tp + fp + fn)  # True negatives for class i\n","\n","        print(f\"\\nClass '{class_name}':\")\n","        print(f\"  True Positives (TP): {tp}\")\n","        print(f\"  False Positives (FP): {fp}\")\n","        print(f\"  False Negatives (FN): {fn}\")\n","        print(f\"  True Negatives (TN): {tn}\")\n","\n","    # Error Rate\n","    error_rate = 1 - accuracy\n","    print(f\"\\nError Rate: {error_rate * 100:.2f}%\")\n","\n","    # Precision, F1 Score, and MCC for multiclass classification\n","    precision = precision_score(y_test, y_pred, average='weighted')\n","    f1 = f1_score(y_test, y_pred, average='weighted')\n","    mcc = matthews_corrcoef(y_test, y_pred)\n","\n","    print(f\"\\nPrecision: {precision:.2f}\")\n","    print(f\"F1 Score: {f1:.2f}\")\n","    print(f'Matthews Correlation Coefficient: {mcc:.2f}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"EuMV2Iho-Oh5","executionInfo":{"status":"ok","timestamp":1727001713856,"user_tz":-330,"elapsed":423612,"user":{"displayName":"Saptangshu Datta","userId":"11034336111113471898"}},"outputId":"b211579f-581f-4fc4-b4a8-848d13dff700"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.17.0)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.3.2)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.6.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.11.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.4.1)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.1)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.32.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (71.0.4)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.12.2)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.64.1)\n","Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.17.0)\n","Requirement already satisfied: keras>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.4.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.1)\n","Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.26.4)\n","Requirement already satisfied: scipy>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.44.0)\n","Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (13.8.1)\n","Requirement already satisfied: namex in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.0.8)\n","Requirement already satisfied: optree in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.12.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2024.8.30)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.7)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.0.4)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow) (2.1.5)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (2.18.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->tensorflow) (0.1.2)\n","Epoch 1/10\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m49s\u001b[0m 971ms/step - accuracy: 0.0856 - loss: 0.4243 - val_accuracy: 0.2781 - val_loss: -0.2621\n","Epoch 2/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 929ms/step - accuracy: 0.1341 - loss: -0.9852 - val_accuracy: 0.1821 - val_loss: 1.2612\n","Epoch 3/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 989ms/step - accuracy: 0.2105 - loss: -0.7200 - val_accuracy: 0.0861 - val_loss: 0.4501\n","Epoch 4/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 959ms/step - accuracy: 0.1552 - loss: -4.2833 - val_accuracy: 0.3278 - val_loss: -2.6599\n","Epoch 5/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 992ms/step - accuracy: 0.2240 - loss: -15.1901 - val_accuracy: 0.3311 - val_loss: -3.6917\n","Epoch 6/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 1s/step - accuracy: 0.3359 - loss: -24.5113 - val_accuracy: 0.3411 - val_loss: -11.4183\n","Epoch 7/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 1s/step - accuracy: 0.2750 - loss: -25.0131 - val_accuracy: 0.3543 - val_loss: -15.9807\n","Epoch 8/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 947ms/step - accuracy: 0.3235 - loss: -41.7940 - val_accuracy: 0.3311 - val_loss: -21.5251\n","Epoch 9/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 931ms/step - accuracy: 0.3129 - loss: -64.9728 - val_accuracy: 0.3278 - val_loss: -37.8031\n","Epoch 10/10\n","\u001b[1m38/38\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 978ms/step - accuracy: 0.3742 - loss: -96.4911 - val_accuracy: 0.5033 - val_loss: -48.9060\n","\u001b[1m10/10\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 271ms/step\n","Accuracy: 50.33%\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.72      0.84      0.78       180\n","           1       0.00      0.00      0.00         9\n","           2       0.00      0.00      0.00       113\n","\n","    accuracy                           0.50       302\n","   macro avg       0.24      0.28      0.26       302\n","weighted avg       0.43      0.50      0.46       302\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"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JImAi/Lx8ZEk/fnnn7nq/9tvv8nDw0OVKlWyaw8KCpKfn59+++03u/by5cubzlGyZEmdP3/+BiM2e+KJJ9S0aVM9/fTTCgwMVNeuXfXRRx9dN2G8GmfVqlVN+6pXr64zZ84oPT3drv2f76VkyZKSlKf30rZtW5UoUUIffvihFi9erLvuusv0WV6VnZ2tadOmqXLlyrJarSpVqpRKly6tPXv2KCUlJdfXLFu2bJ5uUpk8ebL8/f21a9cuzZgxQ2XKlMn1sQCQVySJgIvy8fFRSEiIfvrppzwd988bR66lUKFCObYbhnHD17g6X+4qb29vbdy4Ud9884169uypPXv26IknntADDzxg6nszbua9XGW1WtWpUyfFxcVp2bJl16wiStKrr76qqKgoNWvWTO+//75Wr16tNWvWqGbNmrmumEp/fT558eOPP+rUqVOSpL179+bpWADIK5JEwIU9/PDD+vXXXxUfH/+vfUNDQ5Wdna1Dhw7ZtSclJSk5Odl2p3J+KFmypN2dwFf9s1opSR4eHmrVqpWmTp2q/fv365VXXtG6deu0fv36HM99Nc4DBw6Y9v3yyy8qVaqUihUrdnNv4Bq6d++uH3/8UX/++WeON/tc9cknn6hly5aaN2+eunbtqgcffFARERGmzyS3CXtupKenq0+fPqpRo4b69++vSZMmadu2bfl2fgD4J5JEwIU9//zzKlasmJ5++mklJSWZ9v/666968803Jf01XCrJdAfy1KlTJUnt2rXLt7gqVqyolJQU7dmzx9Z28uRJLVu2zK7fuXPnTMdeXVT6n8vyXBUcHKx69eopLi7OLun66aef9PXXX9vepyO0bNlSL7/8st566y0FBQVds1+hQoVMVcqPP/5Yx48ft2u7mszmlFDn1ejRo3Xs2DHFxcVp6tSpCgsLU2Rk5DU/RwC4WSymDbiwihUrasmSJXriiSdUvXp1uyeubNq0SR9//LF69+4tSapbt64iIyP17rvvKjk5Wc2bN9fWrVsVFxenjh07XnN5lRvRtWtXjR49Wo8++qiee+45XbhwQbNnz1aVKlXsbtyIiYnRxo0b1a5dO4WGhurUqVN6++23dccdd+jee++95vnfeOMNtWnTRuHh4erbt68uXryomTNnytfXV+PHj8+39/FPHh4eeumll/6138MPP6yYmBj16dNHTZo00d69e7V48WLdeeeddv0qVqwoPz8/zZkzRyVKlFCxYsXUuHFjVahQIU9xrVu3Tm+//bbGjRtnW5JnwYIFatGihcaMGaNJkybl6XwAkCtOvrsaQC4cPHjQ6NevnxEWFmZ4enoaJUqUMJo2bWrMnDnTuHTpkq1fZmamMWHCBKNChQpGkSJFjHLlyhnR0dF2fQzjryVw2rVrZ7rOP5deudYSOIZhGF9//bVRq1Ytw9PT06hatarx/vvvm5bAWbt2rdGhQwcjJCTE8PT0NEJCQoxu3boZBw8eNF3jn8vEfPPNN0bTpk0Nb29vw8fHx2jfvr2xf/9+uz5Xr/fPJXYWLFhgSDISEhKu+Zkahv0SONdyrSVwRowYYQQHBxve3t5G06ZNjfj4+ByXrvnss8+MGjVqGIULF7Z7n82bNzdq1qyZ4zX/fp7U1FQjNDTUaNCggZGZmWnXb/jw4YaHh4cRHx9/3fcAADfCYhh5mNkNAAAAt8CcRAAAAJiQJAIAAMCEJBEAAAAmJIkAAAAwIUkEAACACUkiAAAATEgSAQAAYHJbPnHFu/5gZ4cAmGz74jVnhwDYqRRU3NkhAHa8nJiVODJ3uPjjWw47tyNRSQQAAIDJbVlJBAAAyBMLdbN/IkkEAACwWJwdgcshbQYAAIAJlUQAAACGm034RAAAAGBCJREAAIA5iSZUEgEAAGBCJREAAIA5iSZ8IgAAADChkggAAMCcRBOSRAAAAIabTfhEAAAAYEIlEQAAgOFmEyqJAAAAMKGSCAAAwJxEEz4RAAAAmFBJBAAAYE6iCZVEAAAAmFBJBAAAYE6iCUkiAAAAw80mpM0AAAAwoZIIAADAcLMJnwgAAABMqCQCAABQSTThEwEAAIAJlUQAAAAP7m7+JyqJAAAAMKGSCAAAwJxEE5JEAAAAFtM2IW0GAACACUkiAACAxcNxWx5t3LhR7du3V0hIiCwWi5YvX37NvgMGDJDFYtH06dPt2s+dO6cePXrIx8dHfn5+6tu3r9LS0vIUB0kiAACAC0lPT1fdunU1a9as6/ZbtmyZNm/erJCQENO+Hj16aN++fVqzZo1WrFihjRs3qn///nmKgzmJAAAALjQnsU2bNmrTps11+xw/flxDhgzR6tWr1a5dO7t9P//8s1atWqVt27apUaNGkqSZM2eqbdu2mjx5co5JZU6oJAIAADhQRkaGUlNT7baMjIwbPl92drZ69uypUaNGqWbNmqb98fHx8vPzsyWIkhQRESEPDw9t2bIl19chSQQAAHDgnMTY2Fj5+vrabbGxsTcc6uuvv67ChQvrueeey3F/YmKiypQpY9dWuHBh+fv7KzExMdfXYbgZAADAgaKjoxUVFWXXZrVab+hcO3bs0JtvvqmdO3fK4uAhciqJAAAAFovDNqvVKh8fH7vtRpPE7777TqdOnVL58uVVuHBhFS5cWL/99ptGjBihsLAwSVJQUJBOnTpld9yVK1d07tw5BQUF5fpaVBIBAABukSeu9OzZUxEREXZtrVu3Vs+ePdWnTx9JUnh4uJKTk7Vjxw41bNhQkrRu3TplZ2ercePGub4WSSIAAIALSUtL0+HDh22vExIStGvXLvn7+6t8+fIKCAiw61+kSBEFBQWpatWqkqTq1avroYceUr9+/TRnzhxlZmZq8ODB6tq1a67vbJZIEgEAAFxqCZzt27erZcuWttdX5zNGRkZq4cKFuTrH4sWLNXjwYLVq1UoeHh7q3LmzZsyYkac4SBIBAABcSIsWLWQYRq77Hz161NTm7++vJUuW3FQcJIkAAAC3yJzEgsQnAgAAABMqiQAAAC40J9FVUEkEAACACZVEAAAA5iSakCQCAACQJJrwiQAAAMCESiIAAAA3rphQSQQAAIAJlUQAAADmJJrwiQAAAMCESiIAAABzEk2oJAIAAMCESiIAAABzEk1IEgEAABhuNiFtBgAAgAmVRAAA4PYsVBJNqCQCAADAhEoiAABwe1QSzagkAgAAwIRKIgAAAIVEEyqJAAAAMKGSCAAA3B5zEs1IEgEAgNsjSTRz6nDz/v37NXDgQNWvX1/BwcEKDg5W/fr1NXDgQO3fv9+ZoQEAALg1p1USv/rqK3Xs2FENGjRQhw4dFBgYKElKSkrSmjVr1KBBA3322Wdq3bq1s0IEAABugkqimcUwDMMZF65bt646dOigmJiYHPePHz9eS5cu1Z49e/J8bu/6g282PCDfbfviNWeHANipFFTc2SEAdrycOAnOp+t7Djt36ge9HHZuR3LacPPBgwfVo0ePa+7v1q2bDh06VIARAQAAd2WxWBy23aqclrOHhYVp5cqVqlq1ao77V65cqdDQ0AKO6vbXtEFFDe8VoQY1yiu4tK+6DH9XX2z4/2rtuxOeVM9H7rE75usf9qvD4LclSeWD/RXd/yG1uKuKAgN8dPJ0iv735Ta9/t/VyrySVaDvBbenpUvma/P363X82FF5Wq2qWqOOevZ/TmXLhdn6nD93Ru+986b27NiiixfTFXJHqDr36KvwZq2cFzjc0gdLFituwTydOXNaVapW0wsvjlHtOnWcHRaQL5yWJMbExKh79+7asGGDIiIi7OYkrl27VqtWrdKSJUucFd5tq5i3VXsPHtd7n8Xrw6n9c+yz+od9embc+7bXGZev2P5ctUKgPCweGjzxA/36+2nVrBSiWWO6qZi3VdHTljk8ftz+9u3ZqYceeVyVqtVUdlaWFs97SzHPD9Kb8z+Rl7e3JGnma2OVnpamFyZOVQkfP32/bpWmvvyCXn97ke6sXM3J7wDuYtVXX2rypFi9NG6Cateuq8WL4vTsM3312YpVCggIcHZ4yKtbt+DnME5LEh9//HGVLVtWM2bM0JQpU5SYmChJCgoKUnh4uDZs2KDw8HBnhXfb+vqH/fr6h+vfOX758hUlnf0zx31rNv2sNZt+tr0+evysqoSWUb/H7yNJRL4Y89pbdq8HPz9BT3WO0K+HflbNOg0kSQf27VG/YdGqXK2WJOmxJ5/WF58s0ZGDP5MkosAsilugTo91UcdHO0uSXho3QRs3btDypZ+qb7+c/xEO3Eqcuk5ikyZN1KRJE2eGgBzc16iyflsbq+TUC9qw7aAmzFqhcynp1+zvU9xb51IvFGCEcCcX0tMkSSVK+Njaqtaso03rv1bDxveqWPES2rRhjTIzM1SzXiNnhQk3k3n5sn7ev099+z1ja/Pw8NA99zTRnt0/OjEy3Khbee6go7CYNuys2fSzPlu3W0ePn9Wdd5TShCHt9dlbz6p55BRlZ5tvhL+zXCk927U5VUQ4RHZ2thbMmqxqteqqfIVKtvYRY1/XlJdfUO9H71ehQoVk9fLS8xMmK7hsOSdGC3dyPvm8srKyTMPKAQEBSkg44qSogPzlskniiy++qMTERM2fP/+6/TIyMpSRkWHXZmRnyeJRyJHh3bY+Xr3D9ud9h09o76Hj+nnFBDVrVFkbth606xtS2lefvzVIS7/5UQuWbSroUOEG5s54TceO/qpX3pxn1/6/BbN1Ie1PjXtjtnx8/bT1hw2aEvOCJk7/r0LvrOykaAHcyqgkmjn1iSvXc/z4cR09evRf+8XGxsrX19duu5K041+PQ+4cPX5Wp8//qYrlStu1B5f21aq5Q7V5zxENevl/TooOt7O5M17Xjs3fa8KUdxRQOtDWnnjid321/EMNHDVOdRrcrbCKVdSlV39VrFpDqz772IkRw52U9CupQoUK6ezZs3btZ8+eValSpZwUFW4GS+CYuWySGBcXp3Xr1v1rv+joaKWkpNhthQMbFkCE7qFsGT8F+BZT4plUW1tIaV+tnjtUP/58TP3HvS8nrceO25RhGJo743Vt/X69xk+eo8Dgsnb7My5dkiR5WOx/vjw8PJRtZBdYnHBvRTw9Vb1GTW3ZHG9ry87O1pYt8apTt74TIwPyj8sON+eW1WqV1Wq1a2Oo+dqKeXvaVQXDygaoTpWyOp96QedS0vWfZ9pq+dpdSjyTqjvLldIrQzvq19/P2O5oDintq9X/HapjJ88peuoylS75/09suNYd0UBezJ3xmr5bu0ovvDxV3kWL6vy5M5KkosWKy2r1UtnyYQoqW05zpr2iyAHDVMLHV1u/36A9O7Yo+pXpzg0ebqVnZB+NeXG0ataspVq16+j9RXG6ePGiOj7aydmh4QbcyhU/R3HaY/n+TVJSkt555x2NHTs2z8fyWL5ru69hZX3936Gm9kWfb9Zzr36oj6b2V91qd8ivhLdOnk7RN/G/KObtFTp17q8E8Mn2jTU3pmeO5+Zzvz4ey5c7nVvlPBIwaNQ43f/QI5KkE38c0/v/nalf9u7SpUsXFBRSTo906akWD7QryFBveTyW7+b9b/H7tsW0q1arrtEvvqQ6deo6O6xbljMfyxfQy3FTp86+181h53Ykl00Sd+/erQYNGigrK+9P8SBZgSsiSYSrIUmEq3FqkhjpwCQx7tZMEp32v2PPnj3X3X/gwIECigQAAAD/5LQksV69erJYLDne9HC1nfkBAACgIJBzmDktSfT399ekSZPUqlWrHPfv27dP7du3L+CoAAAAIDkxSWzYsKFOnDih0NDQHPcnJyeztAoAACgQVBLNnJYkDhgwQOnp134ecPny5bVgwYICjAgAALgrkkQzpyWJjz76qKnthx9+UKNGjWS1WlWyZElFRkY6ITIAAAC41BNX2rRpo+PHjzs7DAAA4G4sDtxuUS6VJDIHEQAAwDXc8o/lAwAAuFnMSTRzqUriO++8o8DAQGeHAQAA4PZcqpLYvXt3Z4cAAADcEJVEM5eqJAIAALi7jRs3qn379goJCZHFYtHy5ctt+zIzMzV69GjVrl1bxYoVU0hIiHr16qUTJ07YnePcuXPq0aOHfHx85Ofnp759+yotLS1PcZAkAgAAt2exWBy25VV6errq1q2rWbNmmfZduHBBO3fu1JgxY7Rz504tXbpUBw4c0COPPGLXr0ePHtq3b5/WrFmjFStWaOPGjerfv3+e4nCp4WYAAABncKXh5jZt2qhNmzY57vP19dWaNWvs2t566y3dfffdOnbsmMqXL6+ff/5Zq1at0rZt29SoUSNJ0syZM9W2bVtNnjxZISEhuYqDSiIAAIADZWRkKDU11W7LyMjIt/OnpKTIYrHIz89PkhQfHy8/Pz9bgihJERER8vDw0JYtW3J9XpJEAAAABy6mHRsbK19fX7stNjY2X8K+dOmSRo8erW7dusnHx0eSlJiYqDJlytj1K1y4sPz9/ZWYmJjrczPcDAAA4EDR0dGKioqya7NarTd93szMTHXp0kWGYWj27Nk3fb5/IkkEAABuz5FzEq1Wa74khX93NUH87bfftG7dOlsVUZKCgoJ06tQpu/5XrlzRuXPnFBQUlOtrMNwMAABwC7maIB46dEjffPONAgIC7PaHh4crOTlZO3bssLWtW7dO2dnZaty4ca6vQyURAAC4PVe6uzktLU2HDx+2vU5ISNCuXbvk7++v4OBgPfbYY9q5c6dWrFihrKws2zxDf39/eXp6qnr16nrooYfUr18/zZkzR5mZmRo8eLC6du2a6zubJZJEAAAAl7J9+3a1bNnS9vrqfMbIyEiNHz9en3/+uSSpXr16dsetX79eLVq0kCQtXrxYgwcPVqtWreTh4aHOnTtrxowZeYqDJBEAALg9V6oktmjRQoZhXHP/9fZd5e/vryVLltxUHCSJAAAArpMjugxuXAEAAIAJlUQAAOD2XGm42VVQSQQAAIAJlUQAAOD2qCSaUUkEAACACZVEAADg9qgkmlFJBAAAgAmVRAAA4PaoJJqRJAIAAJAjmjDcDAAAABMqiQAAwO0x3GxGJREAAAAmVBIBAIDbo5JoRiURAAAAJlQSAQCA26OQaEYlEQAAACZUEgEAgNtjTqIZSSIAAHB75IhmDDcDAADAhEoiAABweww3m1FJBAAAgAmVRAAA4PYoJJpRSQQAAIAJlUQAAOD2PDwoJf4TlUQAAACYUEkEAABujzmJZiSJAADA7bEEjhnDzQAAADChkggAANwehUQzKokAAAAwoZIIAADcHnMSzagkAgAAwIRKIgAAcHtUEs2oJAIAAMCESiIAAHB7FBLNSBIBAIDbY7jZjOFmAAAAmFBJBAAAbo9CohmVRAAAAJhQSQQAAG6POYlmVBIBAABgQiURAAC4PQqJZlQSAQAAYEIlEQAAuD3mJJpRSQQAAIAJlUQAAOD2KCSakSQCAAC3x3CzGcPNAAAAMKGSCAAA3B6FRLPbMkn8/bvpzg4BMCnudVv+dQMA5LONGzfqjTfe0I4dO3Ty5EktW7ZMHTt2tO03DEPjxo3T3LlzlZycrKZNm2r27NmqXLmyrc+5c+c0ZMgQffHFF/Lw8FDnzp315ptvqnjx4rmOg+FmAADg9iwWi8O2vEpPT1fdunU1a9asHPdPmjRJM2bM0Jw5c7RlyxYVK1ZMrVu31qVLl2x9evTooX379mnNmjVasWKFNm7cqP79++ftMzEMw8hz9C7uTNoVZ4cAmFBJBIDrc+bPZPjrGx127vjRzW74WIvFYldJNAxDISEhGjFihEaOHClJSklJUWBgoBYuXKiuXbvq559/Vo0aNbRt2zY1atRIkrRq1Sq1bdtWf/zxh0JCQnJ1bSqJAADA7VksjtsyMjKUmppqt2VkZNxQnAkJCUpMTFRERIStzdfXV40bN1Z8fLwkKT4+Xn5+frYEUZIiIiLk4eGhLVu25PpaJIkAAAAOFBsbK19fX7stNjb2hs6VmJgoSQoMDLRrDwwMtO1LTExUmTJl7PYXLlxY/v7+tj65wfgXAABwe45cJzE6OlpRUVF2bVar1WHXyy8kiQAAwO05cgkcq9Wab0lhUFCQJCkpKUnBwcG29qSkJNWrV8/W59SpU3bHXblyRefOnbMdnxsMNwMAANwiKlSooKCgIK1du9bWlpqaqi1btig8PFySFB4eruTkZO3YscPWZ926dcrOzlbjxo1zfS0qiQAAwO250mP50tLSdPjwYdvrhIQE7dq1S/7+/ipfvryGDRumiRMnqnLlyqpQoYLGjBmjkJAQ2x3Q1atX10MPPaR+/fppzpw5yszM1ODBg9W1a9dc39kskSQCAAC4lO3bt6tly5a211fnM0ZGRmrhwoV6/vnnlZ6erv79+ys5OVn33nuvVq1aJS8vL9sxixcv1uDBg9WqVSvbYtozZszIUxyskwgUENZJBIDrc+bPZLOpPzjs3Bujmjrs3I7EnEQAAACYUNoAAABuz4WmJLoMKokAAAAwoZIIAADcnivd3ewqSBIBAIDbI0c0Y7gZAAAAJlQSAQCA22O42YxKIgAAAEyoJAIAALdHIdGMSiIAAABMqCQCAAC350Ep0YRKIgAAAEyoJAIAALdHIdGMJBEAALg9lsAxY7gZAAAAJlQSAQCA2/OgkGhCJREAAAAmVBIBAIDbY06iGZVEAAAAmFBJBAAAbo9CohmVRAAAAJhQSQQAAG7PIkqJ/0SSCAAA3B5L4Jgx3AwAAAATKokAAMDtsQSOGZVEAAAAmFBJBAAAbo9CohmVRAAAAJhQSQQAAG7Pg1KiCZVEAAAAmFBJBAAAbo9CohlJIgAAcHssgWOWqyRxz549uT5hnTp1bjgYAAAAuIZcJYn16tWTxWKRYRg57r+6z2KxKCsrK18DBAAAcDQKiWa5ShITEhIcHQcAAABcSK6SxNDQUEfHAQAA4DQsgWN2Q0vgLFq0SE2bNlVISIh+++03SdL06dP12Wef5WtwAAAAcI48J4mzZ89WVFSU2rZtq+TkZNscRD8/P02fPj2/4wMAAHA4iwO3W1Wek8SZM2dq7ty5+s9//qNChQrZ2hs1aqS9e/fma3AAAABwjjyvk5iQkKD69eub2q1Wq9LT0/MlKAAAgILEOolmea4kVqhQQbt27TK1r1q1StWrV8+PmAAAAAqUh8Vx260qz5XEqKgoDRo0SJcuXZJhGNq6dav+97//KTY2Vv/9738dESMAAAAKWJ6TxKefflre3t566aWXdOHCBXXv3l0hISF688031bVrV0fECAAA4FAMN5tZjGs9RiUXLly4oLS0NJUpUyY/Y7ppZ9KuODsEwKS4F49KB4DrcebP5JPv73bYud9/sq7Dzu1IN/y/49SpUzpw4ICkv7Lv0qVL51tQAAAABYlColmeb1z5888/1bNnT4WEhKh58+Zq3ry5QkJC9OSTTyolJcURMQIAAKCA5TlJfPrpp7VlyxatXLlSycnJSk5O1ooVK7R9+3Y988wzjogRAADAoSwWi8O2W1Weh5tXrFih1atX695777W1tW7dWnPnztVDDz2Ur8EBAADAOfKcJAYEBMjX19fU7uvrq5IlS+ZLUAAAAAXpVl7P0FHyPNz80ksvKSoqSomJiba2xMREjRo1SmPGjMnX4AAAAAoCw81muUoS69evrwYNGqhBgwaaM2eONm/erPLly6tSpUqqVKmSypcvr02bNumdd95xdLwAAAC3raysLI0ZM0YVKlSQt7e3KlasqJdffll/X7HQMAyNHTtWwcHB8vb2VkREhA4dOpTvseRquLljx475fmEAAABX4Sr1vtdff12zZ89WXFycatasqe3bt6tPnz7y9fXVc889J0maNGmSZsyYobi4OFWoUEFjxoxR69attX//fnl5eeVbLDe1mLarYjFtuCIW0waA63Pmz+RTH+x12Lnnd62d674PP/ywAgMDNW/ePFtb586d5e3trffff1+GYSgkJEQjRozQyJEjJUkpKSkKDAzUwoUL8/Xpd3mekwgAAHC78bBYHLZlZGQoNTXVbsvIyMgxjiZNmmjt2rU6ePCgJGn37t36/vvv1aZNG0lSQkKCEhMTFRERYTvG19dXjRs3Vnx8fP5+Jnk9ICsrS5MnT9bdd9+toKAg+fv7220AAAD4f7GxsfL19bXbYmNjc+z7wgsvqGvXrqpWrZqKFCmi+vXra9iwYerRo4ck2W4cDgwMtDsuMDDQ7qbi/JDnJHHChAmaOnWqnnjiCaWkpCgqKkqdOnWSh4eHxo8fn6/BAQAAFASLxXFbdHS0UlJS7Lbo6Ogc4/joo4+0ePFiLVmyRDt37lRcXJwmT56suLi4Av5EbmCdxMWLF2vu3Llq166dxo8fr27duqlixYqqU6eONm/ebJtUCQAAAMlqtcpqteaq76hRo2zVREmqXbu2fvvtN8XGxioyMlJBQUGSpKSkJAUHB9uOS0pKUr169fI17jxXEhMTE1W79l8TMIsXL257XvPDDz+slStX5mtwAAAABcFV1km8cOGCPDzs07NChQopOztbklShQgUFBQVp7dq1tv2pqanasmWLwsPDb/6D+Js8J4l33HGHTp48KUmqWLGivv76a0nStm3bcp0lX7V//34NHDhQ9evXV3BwsIKDg1W/fn0NHDhQ+/fvz2toAAAAt7T27dvrlVde0cqVK3X06FEtW7ZMU6dO1aOPPirpr2R22LBhmjhxoj7//HPt3btXvXr1UkhISL4vWZjn4eZHH31Ua9euVePGjTVkyBA9+eSTmjdvno4dO6bhw4fn+jxfffWVOnbsqAYNGqhDhw62CZhJSUlas2aNGjRooM8++0ytW7fOa4gAAAB54ioPRpk5c6bGjBmjgQMH6tSpUwoJCdEzzzyjsWPH2vo8//zzSk9PV//+/ZWcnKx7771Xq1atytc1EqV8WCdx8+bN2rRpkypXrqz27dvn+ri6deuqQ4cOiomJyXH/+PHjtXTpUu3ZsyfPMbFO4s1JT0/X3NkztHH9Wp0/f05VqlbXsJEvqHrN3K/zBDPWSbx5HyxZrLgF83TmzGlVqVpNL7w4RrXr1HF2WHBjfCfzlzN/Jp/91HEjmLM713DYuR3pptdJvOeeexQVFaXGjRvr1VdfzfVxBw8etN3OnZNu3bo55BEz+HevvTxW27bEa+zLr2nRh8t09z1NNPTZp3X6VJKzQ4MbW/XVl5o8KVbPDBykDz5epqpVq+nZZ/rq7Nmzzg4NborvJG53+baY9smTJzVmzJhc9w8LC7vujS4rV65UaGhofoSGPMi4dEnfrlujQc+NUL0GjXRHuVD1fWaQ7ihXXss++cDZ4cGNLYpboE6PdVHHRzurYqVKemncBHl5eWn50k+dHRrcFN/J24sjl8C5VTmtsBsTE6Pu3btrw4YNioiIsJuTuHbtWq1atUpLlixxVnhu60pWlrKysuT5j5uQrFar9uz60UlRwd1lXr6sn/fvU99+z9jaPDw8dM89TbRnN99LFDy+k3AHTksSH3/8cZUtW1YzZszQlClTbKuEBwUFKTw8XBs2bMj3W7nx74oVK6Zadepp4X/nKLTCnfL3D9A3q7/UT3t3q2y58s4OD27qfPJ5ZWVlKSAgwK49ICBACQlHnBQV3BnfydtPXpeqcQdOnUnfpEkTNWnS5KbOkZGRYXr+YUZmoTwvx4P/NyYmVrExY9TxoZYqVKiQqlSrrojWbXXgZ5YlAgDAXeQ6SYyKirru/tOnT990MDciNjZWEyZMsGsbFT1Gz7849hpH4N/cUa68Zs2N08WLF5Selq5SpUtrzAsjFFL2DmeHBjdV0q+kChUqZLoh4OzZsypVqpSTooI74zt5+8m3mzRuI7lOEn/88d/nWDRr1uymgvm7F198UYmJiZo/f/51+0VHR5sS2D8zC+VbHO7M27uovL2LKjU1RVvjf9DAodf/hwLgKEU8PVW9Rk1t2Ryv+1tFSJKys7O1ZUu8unZ70snRwR3xnYQ7yHWSuH79ekfGYfLHH3/ojz/++Nd+OT0P8TLrJN6ULZu+lyFD5UMr6I/fj2nWm5NVPqyC2rV/1NmhwY31jOyjMS+OVs2atVSrdh29vyhOFy9eVMdHOzk7NLgpvpO3F+Ykmrns6r7vvfees0NwW2lpaZrz1nSdPpUoHx9fNW/1gJ4ZOFSFixRxdmhwYw+1aavz587p7bdm6MyZ06parbrefue/CmBoD07Cd/L24kGOaHLTT1y5GWfOnNH8+fMVHx9vd3dzkyZN1Lt3b5UuXfrGzkslES6IJ64AwPU582dy2Ge/OOzc0ztUc9i5Hclp8zS3bdumKlWqaMaMGfL19VWzZs3UrFkz+fr6asaMGapWrZq2b9/urPAAAIAb8bA4brtVOS1nHzJkiB5//HHNmTPHNA/AMAwNGDBAQ4YMUXx8vJMiBAAAcF9OSxJ3796thQsX5jhR1GKxaPjw4apfv74TIgMAAO6GG1fMbmi4+bvvvtOTTz6p8PBwHT9+XJK0aNEiff/997k+R1BQkLZu3XrN/Vu3brU9qg8AAAAFK8+VxE8//VQ9e/ZUjx499OOPP9qedpKSkqJXX31VX375Za7OM3LkSPXv3187duxQq1atTM9unjt3riZPnpzX8AAAAPLsVp476Ch5ThInTpyoOXPmqFevXvrggw9s7U2bNtXEiRNzfZ5BgwapVKlSmjZtmt5++21lZWVJkgoVKqSGDRtq4cKF6tKlS17DAwAAQD7Ic5J44MCBHJ+s4uvrq+Tk5Dyd64knntATTzyhzMxMnTlzRpJUqlQpFWE9PgAAUICYkmiW5yQxKChIhw8fVlhYmF37999/rzvvvPOGgihSpIiCg4Nv6FgAAICb5UGWaJLnG1f69eunoUOHasuWLbJYLDpx4oQWL16skSNH6tlnn3VEjAAAAChgea4kvvDCC8rOzlarVq104cIFNWvWTFarVSNHjtSQIUMcESMAAIBDOe3pIi7shh/Ld/nyZR0+fFhpaWmqUaOGihcvnt+x3TAeywdXxGP5AOD6nPkz+eKXBx127lfbVnHYuR3phv93eHp6qkaNGvkZCwAAgFMwJdEsz0liy5Ytr7sq+bp1624qIAAAADhfnpPEevXq2b3OzMzUrl279NNPPykyMjK/4gIAACgw3N1sluckcdq0aTm2jx8/XmlpaTcdEAAAAJwv327mefLJJzV//vz8Oh0AAECBsVgct92q8u0+ovj4eHl5eeXX6QAAAAoMz242y3OS2KlTJ7vXhmHo5MmT2r59u8aMGZNvgQEAAMB58pwk+vr62r328PBQ1apVFRMTowcffDDfAgMAACgo3LhilqckMSsrS3369FHt2rVVsmRJR8UEAAAAJ8vTjSuFChXSgw8+qOTkZAeFAwAAUPC4ccUsz3c316pVS0eOHHFELAAAAHAReU4SJ06cqJEjR2rFihU6efKkUlNT7TYAAIBbjYfFcdutKtdzEmNiYjRixAi1bdtWkvTII4/YPZ7PMAxZLBZlZWXlf5QAAAAoULlOEidMmKABAwZo/fr1jowHAACgwFl0C5f8HCTXSaJhGJKk5s2bOywYAAAAZ7iVh4UdJU9zEi238i06AAAAyLU8rZNYpUqVf00Uz507d1MBAQAAFDQqiWZ5ShInTJhgeuIKAAAAbj95ShK7du2qMmXKOCoWAAAAp2BKnVmu5yTy4QEAALiPPN/dDAAAcLthTqJZrpPE7OxsR8YBAAAAF5KnOYkAAAC3I2bVmZEkAgAAt+dBlmiSp8W0AQAA4B6oJAIAALfHjStmVBIBAABgQiURAAC4PaYkmlFJBAAAcCHHjx/Xk08+qYCAAHl7e6t27dravn27bb9hGBo7dqyCg4Pl7e2tiIgIHTp0KN/jIEkEAABuz0MWh215cf78eTVt2lRFihTRV199pf3792vKlCkqWbKkrc+kSZM0Y8YMzZkzR1u2bFGxYsXUunVrXbp0KV8/E4txGz5K5UzaFWeHAJgU92J2BwBcjzN/Jmf9cNRh5x7UNCzXfV944QX98MMP+u6773LcbxiGQkJCNGLECI0cOVKSlJKSosDAQC1cuFBdu3bNj5AlUUkEAACQxeK4LSMjQ6mpqXZbRkZGjnF8/vnnatSokR5//HGVKVNG9evX19y5c237ExISlJiYqIiICFubr6+vGjdurPj4+Hz9TEgSAQCA2/OwOG6LjY2Vr6+v3RYbG5tjHEeOHNHs2bNVuXJlrV69Ws8++6yee+45xcXFSZISExMlSYGBgXbHBQYG2vblF8a/AAAAHCg6OlpRUVF2bVarNce+2dnZatSokV599VVJUv369fXTTz9pzpw5ioyMdHisf0clEQAAuD0Pi8Vhm9VqlY+Pj912rSQxODhYNWrUsGurXr26jh07JkkKCgqSJCUlJdn1SUpKsu3Lt88kX88GAACAG9a0aVMdOHDAru3gwYMKDQ2VJFWoUEFBQUFau3atbX9qaqq2bNmi8PDwfI2F4WYAAOD2XGUx7eHDh6tJkyZ69dVX1aVLF23dulXvvvuu3n33XUmSxWLRsGHDNHHiRFWuXFkVKlTQmDFjFBISoo4dO+ZrLCSJAAAALuKuu+7SsmXLFB0drZiYGFWoUEHTp09Xjx49bH2ef/55paenq3///kpOTta9996rVatWycvLK19jYZ1EoICwTiIAXJ8zfybnbT3msHP3vbu8w87tSMxJBAAAgAmlDQAA4PZcZU6iKyFJBAAAbo+hVTM+EwAAAJhQSQQAAG7PwnizCZVEAAAAmFBJBAAAbo86ohmVRAAAAJhQSQQAAG7PgzmJJlQSAQAAYEIlEQAAuD3qiGYkiQAAwO0x2mzGcDMAAABMqCQCAAC3x2LaZlQSAQAAYEIlEQAAuD2qZmZ8JgAAADChkggAANwecxLNqCQCAADAhEoiAABwe9QRzagkAgAAwIRKIgAAcHvMSTS7LZPEDb+ednYIgMmJPy85OwTATv97Kjg7BMBlMLRqxmcCAAAAk9uykggAAJAXDDebUUkEAACACZVEAADg9qgjmlFJBAAAgAmVRAAA4PaYkmhGJREAAAAmVBIBAIDb82BWoglJIgAAcHsMN5sx3AwAAAATKokAAMDtWRhuNqGSCAAAABMqiQAAwO0xJ9GMSiIAAABMqCQCAAC3xxI4ZlQSAQAAYEIlEQAAuD3mJJqRJAIAALdHkmjGcDMAAABMqCQCAAC3x2LaZlQSAQAAYEIlEQAAuD0PCokmVBIBAABgQiURAAC4PeYkmlFJBAAAgAmVRAAA4PZYJ9GMJBEAALg9hpvNGG4GAABwUa+99posFouGDRtma7t06ZIGDRqkgIAAFS9eXJ07d1ZSUlK+X5skEQAAuD0Pi+O2G7Vt2za98847qlOnjl378OHD9cUXX+jjjz/Wt99+qxMnTqhTp043+QmYkSQCAAC4mLS0NPXo0UNz585VyZIlbe0pKSmaN2+epk6dqvvvv18NGzbUggULtGnTJm3evDlfYyBJBAAAbs/iwP8yMjKUmppqt2VkZFw3nkGDBqldu3aKiIiwa9+xY4cyMzPt2qtVq6by5csrPj4+Xz8TkkQAAAAHio2Nla+vr90WGxt7zf4ffPCBdu7cmWOfxMREeXp6ys/Pz649MDBQiYmJ+Ro3dzcDAAC358glcKKjoxUVFWXXZrVac+z7+++/a+jQoVqzZo28vLwcF1QukCQCAAA4kNVqvWZS+E87duzQqVOn1KBBA1tbVlaWNm7cqLfeekurV6/W5cuXlZycbFdNTEpKUlBQUL7GTZIIAADcnqusktiqVSvt3bvXrq1Pnz6qVq2aRo8erXLlyqlIkSJau3atOnfuLEk6cOCAjh07pvDw8HyNhSQRAAC4PQ8XeeRKiRIlVKtWLbu2YsWKKSAgwNbet29fRUVFyd/fXz4+PhoyZIjCw8N1zz335GssJIkAAAC3kGnTpsnDw0OdO3dWRkaGWrdurbfffjvfr2MxDMPI97M62Se7Tzo7BMDkxJ+XnB0CYKf/PRWcHQJgx8uJpavNh5Mddu57Kvk57NyOxBI4AAAAMGG4GQAAwDWmJLoUKokAAAAwoZIIAADcnoVSogmVRAAAAJhQSQQAAG7PRZZJdCkkiQAAwO2RI5ox3AwAAAATKokAAACUEk2oJAIAAMCESiIAAHB7LIFjRiURAAAAJlQSAQCA22MJHDMqiQAAADChkggAANwehUQzkkQAAACyRBOGmwEAAGBCJREAALg9lsAxo5IIAAAAEyqJAADA7bEEjhmVRAAAAJhQSQQAAG6PQqIZlUQAAACYUEkEAACglGhCkggAANweS+CYMdwMAAAAEyqJAADA7bEEjhmVRAAAAJhQSQQAAG6PQqIZlUQAAACYuFQlMSMjQ5JktVqdHAkAAHArlBJNnF5JXLNmjdq2bauSJUuqaNGiKlq0qEqWLKm2bdvqm2++cXZ4AAAAbsmplcS4uDg9/fTTeuyxxzRt2jQFBgZKkpKSkvT111+rbdu2mjdvnnr27OnMMG9raz9aoHWfxNm1lQopp+HTF0mStn7zhfZ8/41OJBxSxsULemnBF/IuVsIZocKNpJ0/o/hP5um3vdt15XKGfMuEqNVTUSoTVkVZV65oy7I4/bZ3m1JPn5SndzGVq1Ff4Z2fUrGSAc4OHW7mgyWLFbdgns6cOa0qVavphRfHqHadOs4OCzeAdRLNnJokvvLKK5o+fboGDRpk2te7d2/de++9iomJIUl0sDLlwvTUmCm21x4ehWx/zsy4pMr17lblenfr6yVznREe3Myl9D+1NDZKZavVVfthE+VdwlfJScdlLVpcknTlcoZOHzusRu27q1S5CspIT9N3/5ujlTPHq8vYmU6OHu5k1VdfavKkWL00boJq166rxYvi9OwzffXZilUKCOAfLLj1OTVJPHbsmCIiIq65v1WrVhoxYkQBRuSePDwKqYRfzj9oTds9Lkk6su/HggwJbuzHrz5Wcf/SavXU///d9ykdZPuztWgxdRgRa3dMsx4D9cnEofrz7CmVCChTYLHCvS2KW6BOj3VRx0c7S5JeGjdBGzdu0PKln6pvv/5Ojg55xTqJZk5NEmvWrKl58+Zp0qRJOe6fP3++atSoUcBRuZ+zicf12jOdVbiIp8pXqakHu/eTX6lAZ4cFN5Wwa7PK12qoVW9P1ImDe1XMr5RqtXxYNZu3ueYxly+mSxaLrEWLFWCkcGeZly/r5/371LffM7Y2Dw8P3XNPE+3ZzT+qb0XkiGZOTRKnTJmihx9+WKtWrVJERITdnMS1a9fqyJEjWrlypTNDvO3dUbmGOg98QaVDyunP82e17pM4zR37nJ6bskBW76LODg9uKPX0Sf20foXqPthJDdt11amjB/Xd/2arUOHCqtb0AVP/K5mXFf/JfFW+u4U8vUkSUTDOJ59XVlaWaVg5ICBACQlHnBQVkL+cmiS2aNFCP/30k2bPnq3NmzcrMTFRkhQUFKQ2bdpowIABCgsLu+45MjIybEvnXJV5OUNFPFlGJzeq1m9s+3NQaEXdUbm63hjYVXvj16vR/e2cGBnclWEYKhNWWeGd+0iSSodW0tnjR/XThpWmJDHryhWtnv2KDMNQi56DnREugNsFpUQTp6+TGBYWptdff/2Gj4+NjdWECRPs2h5/Jkpdnh15s6G5Je9iJVQq5A6dTTzu7FDgpor6+qtkSHm7Nv/g8jqy4we7tqwrV7R6zqv68+wpdRz1OlVEFKiSfiVVqFAhnT171q797NmzKlWqlJOiAvKX09dJvFnR0dFKSUmx2x7tO8TZYd2yMi5d0LnEE9e8kQVwtODKNZSc+IddW3LScbsbUq4miClJx9VhZKy8ivsUdJhwc0U8PVW9Rk1t2Rxva8vOztaWLfGqU7e+EyPDjbI48L9blUsniZGRkbr//vuv28dqtcrHx8duY6g59756720l7N+l86dO6rcDP2nxG2Nk8fBQ3XtbSZL+TD6rE0cP2SqLSccSdOLoIV1IS3Vm2LiN1X3gUSUd+UXbV36g5KQTOrh5vfZ9+6Vq3d9e0l8J4qrZE3X66EE90H+0srOzlZ5yTukp55R1JdPJ0cOd9Izso6WffKTPly/TkV9/1cSY8bp48aI6PtrJ2aEB+cLpw83XExISIg8Pl85jb3kp507rwzdf1oU/U1XMx1eh1WprwCtvq5iPnyRp69ef2y22PXfcc5KkzgNHq0GLa99tCtyowApV1WbQWMV/ukDbP18sn9JBurfrAFW9569/MKYnn9HRXZslSR+OH2h3bMdRr6tstboFHjPc00Nt2ur8uXN6+60ZOnPmtKpWq6633/mvAhhuviWxBI6ZxTAMw9lB5LdPdp90dgiAyYk/Lzk7BMBO/3sqODsEwI6XE0tXBxIvOOzcVYNuzdVCXLpM9/vvv+upp55ydhgAAOA2Z3Hgdqty6STx3LlziouL+/eOAAAAN4Ms0cSpcxI///zz6+4/coQFSQEAAJzBqUlix44dZbFYdL1pkRZmkgIAAAe7lZeqcRSnDjcHBwdr6dKlys7OznHbuXOnM8MDAABwW05NEhs2bKgdO3Zcc/+/VRkBAADyg8XiuO1W5dTh5lGjRik9Pf2a+ytVqqT169cXYEQAAACQnFxJvO+++/TQQw9dc3+xYsXUvHnzAowIAAC4I1e5uTk2NlZ33XWXSpQooTJlyqhjx446cOCAXZ9Lly5p0KBBCggIUPHixdW5c2clJSXdyNu+LpdeAgcAAMCdfPvttxo0aJA2b96sNWvWKDMzUw8++KDdyOvw4cP1xRdf6OOPP9a3336rEydOqFOn/H8cJE9cAQoIT1yBq+GJK3A1znziyq+nLzrs3BVLe9/wsadPn1aZMmX07bffqlmzZkpJSVHp0qW1ZMkSPfbYY5KkX375RdWrV1d8fLzuueee/ArbtZ/dDAAAUBAcuQRORkaGMjIy7NqsVqusVuu/HpuSkiJJ8vf3lyTt2LFDmZmZioiIsPWpVq2aypcvn+9JIsPNAAAADhQbGytfX1+7LTY29l+Py87O1rBhw9S0aVPVqlVLkpSYmChPT0/5+fnZ9Q0MDFRiYmK+xk0lEQAAuD1HLlUTHR2tqKgou7bcVBEHDRqkn376Sd9//72jQrsukkQAAAAHyu3Q8t8NHjxYK1as0MaNG3XHHXfY2oOCgnT58mUlJyfbVROTkpIUFBSUXyFLYrgZAADAZZbAMQxDgwcP1rJly7Ru3TpVqGB/g1nDhg1VpEgRrV271tZ24MABHTt2TOHh4Xm82vVRSQQAAHARgwYN0pIlS/TZZ5+pRIkStnmGvr6+8vb2lq+vr/r27auoqCj5+/vLx8dHQ4YMUXh4eL7etCKRJAIAAOS95Ocgs2fPliS1aNHCrn3BggXq3bu3JGnatGny8PBQ586dlZGRodatW+vtt9/O91hYJxEoIKyTCFfDOolwNc5cJ/HoWcf9RocFeDns3I5EJREAALg9R66TeKsiSQQAAG7PkUvg3Kq4uxkAAAAmVBIBAIDbo5BoRiURAAAAJlQSAQCA22NOohmVRAAAAJhQSQQAAGBWogmVRAAAAJhQSQQAAG6POYlmJIkAAMDtkSOaMdwMAAAAEyqJAADA7THcbEYlEQAAACZUEgEAgNuzMCvRhEoiAAAATKgkAgAAUEg0oZIIAAAAEyqJAADA7VFINCNJBAAAbo8lcMwYbgYAAIAJlUQAAOD2WALHjEoiAAAATKgkAgAAUEg0oZIIAAAAEyqJAADA7VFINKOSCAAAABMqiQAAwO2xTqIZSSIAAHB7LIFjxnAzAAAATKgkAgAAt8dwsxmVRAAAAJiQJAIAAMCEJBEAAAAmzEkEAABujzmJZlQSAQAAYEIlEQAAuD3WSTQjSQQAAG6P4WYzhpsBAABgQiURAAC4PQqJZlQSAQAAYEIlEQAAgFKiCZVEAAAAmFBJBAAAbo8lcMyoJAIAAMCESiIAAHB7rJNoRiURAAAAJlQSAQCA26OQaEaSCAAAQJZownAzAAAATEgSAQCA27M48L8bMWvWLIWFhcnLy0uNGzfW1q1b8/kd/zuSRAAAABfy4YcfKioqSuPGjdPOnTtVt25dtW7dWqdOnSrQOEgSAQCA27NYHLfl1dSpU9WvXz/16dNHNWrU0Jw5c1S0aFHNnz8//9/4dZAkAgAAOFBGRoZSU1PttoyMjBz7Xr58WTt27FBERIStzcPDQxEREYqPjy+okCXdpnc3P1Y32Nkh3BYyMjIUGxur6OhoWa1WZ4cD8J2ES+J7eXvwcmBGNH5irCZMmGDXNm7cOI0fP97U98yZM8rKylJgYKBde2BgoH755RfHBZkDi2EYRoFeEbeM1NRU+fr6KiUlRT4+Ps4OB+A7CZfE9xL/JiMjw1Q5tFqtOf6j4sSJEypbtqw2bdqk8PBwW/vzzz+vb7/9Vlu2bHF4vFfdlpVEAAAAV3GthDAnpUqVUqFChZSUlGTXnpSUpKCgIEeEd03MSQQAAHARnp6eatiwodauXWtry87O1tq1a+0qiwWBSiIAAIALiYqKUmRkpBo1aqS7775b06dPV3p6uvr06VOgcZAk4pqsVqvGjRvHRGy4DL6TcEV8L5HfnnjiCZ0+fVpjx45VYmKi6tWrp1WrVpluZnE0blwBAACACXMSAQAAYEKSCAAAABOSRAAAAJiQJAIAAMCEJNHNLV26VA8++KACAgJksVi0a9euXB338ccfq1q1avLy8lLt2rX15ZdfOjZQuI1Zs2YpLCxMXl5eaty4sbZu3Xrd/nwX4UgbN25U+/btFRISIovFouXLl//rMRs2bFCDBg1ktVpVqVIlLVy40OFxAo5Akujm0tPTde+99+r111/P9TGbNm1St27d1LdvX/3444/q2LGjOnbsqJ9++smBkcIdfPjhh4qKitK4ceO0c+dO1a1bV61bt9apU6dy7M93EY6Wnp6uunXratasWbnqn5CQoHbt2qlly5batWuXhg0bpqefflqrV692cKRA/mMJHEiSjh49qgoVKujHH39UvXr1rtv3iSeeUHp6ulasWGFru+eee1SvXj3NmTPHwZHidta4cWPdddddeuuttyT99ZSBcuXKaciQIXrhhRdM/fkuoiBZLBYtW7ZMHTt2vGaf0aNHa+XKlXb/UOnatauSk5O1atWqAogSyD9UEpFn8fHxioiIsGtr3bq14uPjnRQRbgeXL1/Wjh077L5bHh4eioiIuOZ3i+8iXA3fSdxOSBKRZ4mJiaZV3wMDA5WYmOikiHA7OHPmjLKysvL03eK7CFdzre9kamqqLl686KSogBtDkuhGFi9erOLFi9u27777ztkhAQAAF8Wzm93II488osaNG9tely1b9obOExQUpKSkJLu2pKQkBQUF3VR8cG+lSpVSoUKF8vTd4rsIV3Ot76SPj4+8vb2dFBVwY6gkupESJUqoUqVKtu1Gf7DCw8O1du1au7Y1a9YoPDw8P8KEm/L09FTDhg3tvlvZ2dlau3btNb9bfBfhavhO4nZCJdHNnTt3TseOHdOJEyckSQcOHJD017+Gr1ZjevXqpbJlyyo2NlaSNHToUDVv3lxTpkxRu3bt9MEHH2j79u169913nfMmcNuIiopSZGSkGjVqpLvvvlvTp09Xenq6+vTpI4nvIgpeWlqaDh8+bHudkJCgXbt2yd/fX+XLl1d0dLSOHz+u9957T5I0YMAAvfXWW3r++ef11FNPad26dfroo4+0cuVKZ70F4MYZcGsLFiwwJJm2cePG2fo0b97ciIyMtDvuo48+MqpUqWJ4enoaNWvWNFauXFmwgeO2NXPmTKN8+fKGp6encffddxubN2+27eO7iIK2fv36HH8jr34PIyMjjebNm5uOqVevnuHp6WnceeedxoIFCwo8biA/sE4iAAAATJiTCAAAABOSRAAAAJiQJAIAAMCEJBEAAAAmJIkAAAAwIUkEAACACUkiAAAATEgSAQAAYEKSCCDf9O7dWx07drS9btGihYYNG1bgcWzYsEEWi0XJyckOu8Y/3+uNKIg4AeBGkSQCt7nevXvLYrHIYrHI09NTlSpVUkxMjK5cueLway9dulQvv/xyrvoWdMIUFham6dOnF8i1AOBWVNjZAQBwvIceekgLFixQRkaGvvzySw0aNEhFihRRdHS0qe/ly5fl6emZL9f19/fPl/MAAAoelUTADVitVgUFBSk0NFTPPvusIiIi9Pnnn0v6/2HTV155RSEhIapataok6ffff1eXLl3k5+cnf39/dejQQUePHrWdMysrS1FRUfLz81NAQICef/55/fNR8P8cbs7IyNDo0aNVrlw5Wa1WVapUSfPmzdPRo0fVsmVLSVLJkiVlsVjUu3dvSVJ2drZiY2NVoUIFeXt7q27duvrkk0/srvPll1+qSpUq8vb2VsuWLe3ivBFZWVnq27ev7ZpVq1bVm2++mWPfCRMmqHTp0vLx8dGAAQN0+fJl277cxA4AropKIuCGvL29dfbsWdvrtWvXysfHR2vWrJEkZWZmqnXr1goPD9d3332nwoULa+LEiXrooYe0Z88eeXp6asqUKVq4cKHmz5+v6tWra8qUKVq2bJnuv//+a163V69eio+P14wZM1S3bl0lJCTozJkzKleunD799FN17txZBw4ckI+Pj7y9vSVJsbGxev/99zVnzhxVrlxZGzdu1JNPPqnSpUurefPm+v3339WpUycNGjRI/fv31/bt2zVixIib+nyys7N1xx136OOPP1ZAQIA2bdqk/v37Kzg4WF26dLH73Ly8vLRhwwYdPXpUffr0UUBAgF555ZVcxQ4ALs0AcFuLjIw0OnToYBiGYWRnZxtr1qwxrFarMXLkSNv+wMBAIyMjw3bMokWLjKpVqxrZ2dm2toyMDMPb29tYvXq1YRiGERwcbEyaNMm2PzMz07jjjjts1zIMw2jevLkxdOhQwzAM48CBA4YkY82aNTnGuX79ekOScf78eVvbpUuXjKJFixqbNm2y69u3b1+jW7duhmEYRnR0tFGjRg27/aNHjzad659CQ0ONadOmXXP/Pw0aNMjo3Lmz7XVkZKTh7+9vpKen29pmz55tFC9e3MjKyspV7Dm9ZwBwFVQSATewYsUKFS9eXJmZmcrOzlb37t01fvx42/7atWvbzUPcvXu3Dh8+rBIlStid59KlS/r111+VkpKikydPqnHjxrZ9hQsXVqNGjUxDzlft2rVLhQoVylMF7fDhw7pw4YIeeOABu/bLly+rfv36kqSff/7ZLg5JCg8Pz/U1rmXWrFmaP3++jh07posXL+ry5cuqV6+eXZ+6deuqaNGidtdNS0vT77//rrS0tH+NHQBcGUki4AZatmyp2bNny9PTUyEhISpc2P6vfrFixexep6WlqWHDhlq8eLHpXKVLl76hGK4OH+dFWlqaJGnlypUqW7as3T6r1XpDceTGBx98oJEjR2rKlCkKDw9XiRIl9MYbb2jLli25PoezYgeA/EKSCLiBYsWKqVKlSrnu36BBA3344YcqU6aMfHx8cuwTHBysLVu2qFmzZpKkK1euaMeOHWrQoEGO/WvXrq3s7Gx9++23ioiIMO2/WsnMysqytdWoUUNWq1XHjh27ZgWyevXqtptwrtq8efO/v8nr+OGHH9SkSRMNHDjQ1vbrr7+a+u3evVsXL160JcCbN29W8eLFVa5cOfn7+/9r7ADgyri7GYBJjx49VKpUKXXo0EHfffedEhIStGHDBj333HP6448/JElDhw7Va6+9puXLl+uXX37RwIEDr7vGYVhYmCIjI/XUU09p+fLltnN+9NFHkqTQ0FBZLBatWLFCp0+fVlpamkqUKKGRI0dq+PDhiouL06+//qqdO3dq5syZiouLkyQNGDBAhw4d0qhRo3TgwAEtWbJECxcuzNX7PH78uHbt2mW3nT9/XpUrV9b27du1evVqHTx4UGPGjNG2bdtMx1++fFl9+/bV/v379eWXX2rcuHEaPHiwPDw8chU7ALg0Z0+KBOBYf79xJS/7T548afTq1csoVaqUYbVajTvvvNPo16+fkZKSYhjGXzeqDB061PDx8TH8/PyMqKgoo1evXte8ccUwDOPixYvG8OHDjeDgYMPT09OoVKmSMX/+fNv+mJgYIygoyLBYLEZkZKRhGH/dbDN9+nSjatWqRpEiRYzSpUsbrVu3Nr799lvbcV988YVRqVIlw2q1Gvfdd58xf/78XN24Ism0LVq0yLh06ZLRu3dvw9fX1/Dz8zOeffZZ44UXXjDq1q1r+tzGjh1rBAQEGMWLFzf69etnXLp0ydbn32LnxhUArsxiGNeYZQ4AAAC3xXAzAAAATEgSAQAAYEKSCAAAABOSRAAAAJiQJAIAAMCEJBEAAAAmJIkAAAAwIUkEAACACUkiAAAATEgSAQAAYEKSCAAAAJP/A/+ND6YjNqxmAAAAAElFTkSuQmCC\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","[[152  28   0]\n"," [  9   0   0]\n"," [ 51  62   0]]\n","Multiclass classification metrics:\n","\n","Class '-1.0':\n","  True Positives (TP): 152\n","  False Positives (FP): 60\n","  False Negatives (FN): 28\n","  True Negatives (TN): 62\n","\n","Class '0.0':\n","  True Positives (TP): 0\n","  False Positives (FP): 90\n","  False Negatives (FN): 9\n","  True Negatives (TN): 203\n","\n","Class '1.0':\n","  True Positives (TP): 0\n","  False Positives (FP): 0\n","  False Negatives (FN): 113\n","  True Negatives (TN): 189\n","\n","Error Rate: 49.67%\n","\n","Precision: 0.43\n","F1 Score: 0.46\n","Matthews Correlation Coefficient: 0.17\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"4r3JMqYmQNe1"},"execution_count":null,"outputs":[]}]}