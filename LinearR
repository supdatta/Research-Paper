{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN4oTH90eLM7tDRrKAPXPsw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":5,"metadata":{"id":"HMwCy677cM4L","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1726990691731,"user_tz":-330,"elapsed":2014,"user":{"displayName":"Saptangshu Datta","userId":"11034336111113471898"}},"outputId":"2ccf4388-c4be-4774-fa17-a8e4fe3d1d91"},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.2119205298013245\n","Confusion Matrix:\n","[[  0 170  10]\n"," [  0   9   0]\n"," [  0  58  55]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","        -1.0       0.00      0.00      0.00       180\n","         0.0       0.04      1.00      0.07         9\n","         1.0       0.85      0.49      0.62       113\n","\n","    accuracy                           0.21       302\n","   macro avg       0.29      0.50      0.23       302\n","weighted avg       0.32      0.21      0.23       302\n","\n","Accuracy: 0.21\n","Confusion Matrix:\n","[[  0 170  10]\n"," [  0   9   0]\n"," [  0  58  55]]\n","True Positives (TP): 122\n","False Positives (FP): 180\n","False Negatives (FN): 0\n","True Negatives (TN): 0\n","Error Rate: 0.79\n","Precision: 0.32\n","F1 Score: 0.23\n","MCC: 0.26\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Step 1: Import necessary libraries\n","import pandas as pd\n","from sklearn.metrics import matthews_corrcoef, precision_score, f1_score\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n","# Load dataset\n","df = pd.read_csv('/content/Hate speech excel file.csv', encoding='ISO-8859-1')\n","\n","# Step 1: Remove Comment Entries\n","df = df[~df['caption_segment'].str.contains(\"comment\", case=False, na=False)]  # Adjust 'caption_segment' to your column name\n","\n","# Step 2: Prepare Features (X) and Labels (y)\n","X = df['caption_segment'].astype(str)  # Modify this to the appropriate text column\n","y = df['sentiment']  # Modify this to the appropriate label column\n","\n","# Step 3: Handle missing values\n","X = X.fillna('')\n","y = y.fillna(0)\n","# Split the data into training and testing sets (80% training, 20% testing)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=True)\n","\n","# Step 5: Convert text data into numerical form using TfidfVectorizer\n","vectorizer = TfidfVectorizer(max_features=5000)  # Limit to top 5000 words\n","X_train_tfidf = vectorizer.fit_transform(X_train)\n","X_test_tfidf = vectorizer.transform(X_test)\n","\n","# Step 6: Apply Linear Regression\n","lr = LinearRegression()\n","lr.fit(X_train_tfidf, y_train)\n","\n","# Step 7: Make predictions on the test set\n","y_pred = lr.predict(X_test_tfidf)\n","\n","# Since Linear Regression returns continuous values, we need to threshold it to convert into binary class (0 or 1)\n","# For simplicity, we use 0.5 as the threshold\n","y_pred_class = [1 if pred >= 0.5 else 0 for pred in y_pred]\n","\n","# Step 8: Evaluate the model using Accuracy, Precision, Confusion Matrix, F1 Score, and MCL\n","\n","# Accuracy\n","accuracy = accuracy_score(y_test, y_pred_class)\n","print(f'Accuracy: {accuracy}')\n","\n","# Confusion Matrix\n","conf_matrix = confusion_matrix(y_test, y_pred_class)\n","print(f'Confusion Matrix:\\n{conf_matrix}')\n","\n","# Classification Report (Precision, Recall, F1 Score)\n","class_report = classification_report(y_test, y_pred_class)\n","print(f'Classification Report:\\n{class_report}')\n","\n","# Step 8: Evaluate the model using Accuracy, Precision, Confusion Matrix, F1 Score, MCC\n","\n","# Step 8: Evaluate the model using Accuracy, Precision, Confusion Matrix, F1 Score, MCC\n","\n","# Accuracy\n","accuracy = accuracy_score(y_test, y_pred_class)\n","print(f'Accuracy: {accuracy:.2f}')\n","\n","# Confusion Matrix\n","conf_matrix = confusion_matrix(y_test, y_pred_class)\n","print(f'Confusion Matrix:\\n{conf_matrix}')\n","\n","# Get values from the confusion matrix\n","# Instead of ravel and unpack, access elements directly for a 3x3 matrix\n","tn = conf_matrix[0, 0]\n","fp = conf_matrix[0, 1] + conf_matrix[0, 2]\n","fn = conf_matrix[1, 0] + conf_matrix[2, 0]\n","tp = conf_matrix[1, 1] + conf_matrix[1, 2] + conf_matrix[2, 1] + conf_matrix[2, 2]\n","\n","print(f\"True Positives (TP): {tp}\")\n","print(f\"False Positives (FP): {fp}\")\n","print(f\"False Negatives (FN): {fn}\")\n","print(f\"True Negatives (TN): {tn}\")\n","\n","# Error Rate\n","error_rate = 1 - accuracy\n","print(f\"Error Rate: {error_rate:.2f}\")\n","\n","# Precision\n","precision = precision_score(y_test, y_pred_class, average='weighted')\n","print(f\"Precision: {precision:.2f}\")\n","\n","# F1 Score\n","f1 = f1_score(y_test, y_pred_class, average='weighted')\n","print(f\"F1 Score: {f1:.2f}\")\n","\n","# Matthews Correlation Coefficient (MCC)\n","mcc = matthews_corrcoef(y_test, y_pred_class)\n","print(f\"MCC: {mcc:.2f}\")\n","\n","# Visualization of the Confusion Matrix\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted Labels\")\n","plt.ylabel(\"True Labels\")\n","plt.show()"]},{"cell_type":"code","source":[],"metadata":{"id":"2rHEuPQ3qqLN"},"execution_count":null,"outputs":[]}]}